digraph grammar {
	graph [bgcolor=aliceblue rankdir=TB]
	"int x = 0 " [color=blue fontcolor=blue]
	beginCode -> "int x = 0 "
	DO [color=purple fontcolor=purple]
	"int x = 0 " -> DO
	"string str " [color=blue fontcolor=blue]
	DO -> "string str "
	"int y = 25 " [color=blue fontcolor=blue]
	"string str " -> "int y = 25 "
	"for (y!=16)" [color=purple fontcolor=purple]
	"int y = 25 " -> "for (y!=16)"
	" y = y-1" [color=green fontcolor=green]
	" y = y-1" -> "for (y!=16)"
	"print(\"Ainda não obtive o valor\")" [color=brown fontcolor=brown]
	"for (y!=16)" -> "print(\"Ainda não obtive o valor\")"
	"if (str==\"ola\")" [color=red fontcolor=red shape=diamond]
	"print(\"Ainda não obtive o valor\")" -> "if (str==\"ola\")"
	" y = y-2" [color=green fontcolor=green]
	"if (str==\"ola\")" -> " y = y-2"
	endif1 [color=red fontcolor=red shape=diamond]
	" y = y-2" -> endif1
	" y = y*2" [color=green fontcolor=green]
	"if (str==\"ola\")" -> " y = y*2"
	endif1 [color=red fontcolor=red shape=diamond]
	" y = y*2" -> endif1
	endif1 -> " y = y-1"
	" str = input()" [color=green fontcolor=green]
	"for (y!=16)" -> " str = input()"
	"while(x<15)" [color=purple fontcolor=purple]
	" str = input()" -> "while(x<15)"
	"while(x<15)" -> DO
	DO -> endCode
}
